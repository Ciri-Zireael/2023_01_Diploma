//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/User Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @UserInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""User Input"",
    ""maps"": [
        {
            ""name"": ""Session"",
            ""id"": ""ca24cd42-9211-47b2-942e-799b0db23dbe"",
            ""actions"": [
                {
                    ""name"": ""NextSlide"",
                    ""type"": ""Button"",
                    ""id"": ""24a47c56-9c89-47e5-9a9c-8ad4a9f26ea2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrevSlide"",
                    ""type"": ""Button"",
                    ""id"": ""8c83968b-6e75-418b-bf56-4081e949daab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndSession"",
                    ""type"": ""Button"",
                    ""id"": ""8adfbe48-8388-4118-855b-f93adf0cc563"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8051750-6367-4b39-9bf5-8704027ea32a"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd3f9fe4-9a8d-412d-8181-dd4a328073d6"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrevSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ff4c5d8-a2fe-48e9-976c-66bfad0225d3"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndSession"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Session
            m_Session = asset.FindActionMap("Session", throwIfNotFound: true);
            m_Session_NextSlide = m_Session.FindAction("NextSlide", throwIfNotFound: true);
            m_Session_PrevSlide = m_Session.FindAction("PrevSlide", throwIfNotFound: true);
            m_Session_EndSession = m_Session.FindAction("EndSession", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Session
        private readonly InputActionMap m_Session;
        private List<ISessionActions> m_SessionActionsCallbackInterfaces = new List<ISessionActions>();
        private readonly InputAction m_Session_NextSlide;
        private readonly InputAction m_Session_PrevSlide;
        private readonly InputAction m_Session_EndSession;
        public struct SessionActions
        {
            private @UserInput m_Wrapper;
            public SessionActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @NextSlide => m_Wrapper.m_Session_NextSlide;
            public InputAction @PrevSlide => m_Wrapper.m_Session_PrevSlide;
            public InputAction @EndSession => m_Wrapper.m_Session_EndSession;
            public InputActionMap Get() { return m_Wrapper.m_Session; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SessionActions set) { return set.Get(); }
            public void AddCallbacks(ISessionActions instance)
            {
                if (instance == null || m_Wrapper.m_SessionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SessionActionsCallbackInterfaces.Add(instance);
                @NextSlide.started += instance.OnNextSlide;
                @NextSlide.performed += instance.OnNextSlide;
                @NextSlide.canceled += instance.OnNextSlide;
                @PrevSlide.started += instance.OnPrevSlide;
                @PrevSlide.performed += instance.OnPrevSlide;
                @PrevSlide.canceled += instance.OnPrevSlide;
                @EndSession.started += instance.OnEndSession;
                @EndSession.performed += instance.OnEndSession;
                @EndSession.canceled += instance.OnEndSession;
            }

            private void UnregisterCallbacks(ISessionActions instance)
            {
                @NextSlide.started -= instance.OnNextSlide;
                @NextSlide.performed -= instance.OnNextSlide;
                @NextSlide.canceled -= instance.OnNextSlide;
                @PrevSlide.started -= instance.OnPrevSlide;
                @PrevSlide.performed -= instance.OnPrevSlide;
                @PrevSlide.canceled -= instance.OnPrevSlide;
                @EndSession.started -= instance.OnEndSession;
                @EndSession.performed -= instance.OnEndSession;
                @EndSession.canceled -= instance.OnEndSession;
            }

            public void RemoveCallbacks(ISessionActions instance)
            {
                if (m_Wrapper.m_SessionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISessionActions instance)
            {
                foreach (var item in m_Wrapper.m_SessionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SessionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SessionActions @Session => new SessionActions(this);
        public interface ISessionActions
        {
            void OnNextSlide(InputAction.CallbackContext context);
            void OnPrevSlide(InputAction.CallbackContext context);
            void OnEndSession(InputAction.CallbackContext context);
        }
    }
}
